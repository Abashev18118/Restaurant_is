services:
  auth_service:
    image: ghcr.io/netscrawler/restaurant_is-auth:latest
    container_name: auth_service
    ports:
      - "54821:54821"
      - "10001:10001"
    environment:
      - CONFIG_PATH=/auth/config/config.docker.yaml
    depends_on:
      auth_db:
        condition: service_healthy
    volumes:
      - ./config/auth:/auth/config
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  notify:
    image: ghcr.io/netscrawler/restaurant_is-notify:latest
    container_name: notify
    ports:
      - "54822:54822"
      - "10004:10004"
    environment:
      - CONFIG_PATH=/notify/config/config.docker.yaml
    volumes:
      - ./config/notify:/notify/config
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  menu_service:
    image: ghcr.io/netscrawler/restaurant_is-menu_service:latest
    container_name: menu_service
    ports:
      - "50052:50052"
      - "10003:10003"
    environment:
      - CONFIG_PATH=/menu/config/config.docker.yaml
    depends_on:
      menu_db:
        condition: service_healthy
    volumes:
      - ./config/menu:/menu/config
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  order_service:
    image: ghcr.io/netscrawler/restaurant_is-order_service:latest
    container_name: order_service
    ports:
      - "50051:50051"
      - "10005:10005"
    environment:
      - CONFIG_PATH=/order/config/config.docker.yaml
    volumes:
      - ./config/order:/order/config
    depends_on:
      order_db:
        condition: service_healthy
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  user_service:
    image: ghcr.io/netscrawler/restaurant_is-user_service:latest
    container_name: user_service
    ports:
      - "50045:50045"
      - "10006:10006"
    environment:
      - CONFIG_PATH=/user/config/config.docker.yaml
    volumes:
      - ./config/user:/user/config
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  gate:
    image: ghcr.io/netscrawler/restaurant_is-gate:latest
    container_name: gate
    ports:
      - "8080:8080"
      - "10002:10002"
    environment:
      - CONFIG_PATH=/gate/config/config.docker.yaml
    volumes:
      - ./config/gate:/gate/config
    depends_on:
      user_db:
        condition: service_healthy
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  user_db:
    image: postgres:latest
    container_name: user_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user
    ports:
      - "5439:5439"
    command:
      [
        "postgres",
        "-c",
        "port=5439",
        "-c",
        "wal_level=logical",
        "-c",
        "max_wal_senders=10",
        "-c",
        "max_replication_slots=10",
      ]
    volumes:
      - ./migrations/user/pg/init.sql/:/docker-entrypoint-initdb.d/:ro
      - user-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5439"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  user_db_replica:
    image: postgres:latest
    container_name: user_db_replica
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user
    ports:
      - "5440:5439"
    command: ["postgres", "-c", "port=5439", "-c", "wal_level=logical"]
    volumes:
      - ./migrations/user/pg/init.sql/:/docker-entrypoint-initdb.d/:ro
      - user-postgres-data-replica:/var/lib/postgresql/data
    depends_on:
      user_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5439"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  auth_db:
    image: postgres:latest
    container_name: auth_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth
    ports:
      - "5432:5432"
    command:
      [
        "postgres",
        "-c",
        "port=5432",
        "-c",
        "wal_level=logical",
        "-c",
        "max_wal_senders=10",
        "-c",
        "max_replication_slots=10",
      ]
    volumes:
      - ./migrations/auth/pg/init.sql/:/docker-entrypoint-initdb.d:ro
      - auth-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  auth_db_replica:
    image: postgres:latest
    container_name: auth_db_replica
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth
    ports:
      - "5433:5432"
    command: ["postgres", "-c", "port=5432", "-c", "wal_level=logical"]
    volumes:
      - ./migrations/auth/pg/init.sql/:/docker-entrypoint-initdb.d:ro
      - auth-postgres-data-replica:/var/lib/postgresql/data
    depends_on:
      auth_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5432"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  menu_db:
    image: postgres:latest
    container_name: menu_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: menu
    ports:
      - "5434:5434"
    command:
      [
        "postgres",
        "-c",
        "port=5434",
        "-c",
        "wal_level=logical",
        "-c",
        "max_wal_senders=10",
        "-c",
        "max_replication_slots=10",
      ]
    volumes:
      - ./migrations/menu/pg/init.sql/:/docker-entrypoint-initdb.d:ro
      - menu-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5434"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  menu_db_replica:
    image: postgres:latest
    container_name: menu_db_replica
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: menu
    ports:
      - "5436:5434"
    command: ["postgres", "-c", "port=5434", "-c", "wal_level=logical"]
    volumes:
      - ./migrations/menu/pg/init.sql/:/docker-entrypoint-initdb.d:ro
      - menu-postgres-data-replica:/var/lib/postgresql/data
    depends_on:
      menu_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5434"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  order_db:
    image: postgres:latest
    container_name: order_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order
    ports:
      - "5435:5435"
    command:
      [
        "postgres",
        "-c",
        "port=5435",
        "-c",
        "wal_level=logical",
        "-c",
        "max_wal_senders=10",
        "-c",
        "max_replication_slots=10",
      ]
    volumes:
      - ./migrations/order/pg/init.sql/:/docker-entrypoint-initdb.d:ro
      - order-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5435"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  order_db_replica:
    image: postgres:latest
    container_name: order_db_replica
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order
    ports:
      - "5437:5435"
    command: ["postgres", "-c", "port=5435", "-c", "wal_level=logical"]
    volumes:
      - ./migrations/order/pg/init.sql/:/docker-entrypoint-initdb.d:ro
      # - ./migrations/order/pg/replica/replica_setup.sql:/docker-entrypoint-initdb.d/02-replica_setup.sql
      - order-postgres-data-replica:/var/lib/postgresql/data
    depends_on:
      order_db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5435"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  metabase-db:
    image: postgres:15
    container_name: metabase-db
    environment:
      POSTGRES_USER: metabase
      POSTGRES_PASSWORD: metabase123
      POSTGRES_DB: metabase
    ports:
      - "5438:5438"
    command: ["postgres", "-c", "port=5438"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U metabase -p 5438"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server --console-address ":9001" /data
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/ready"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=1
      - KAFKA_DEFAULT_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  loki:
    image: grafana/loki:3.2.1
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki/loki-config.yaml:/etc/loki/loki-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/loki-config.yaml
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  promtail:
    image: grafana/promtail:3.2.1
    container_name: promtail
    volumes:
      - ./config/promtail/positions:/tmp
      - ./config/promtail/promtail-config.yaml:/etc/promtail/promtail-config.yaml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/promtail-config.yaml
    depends_on:
      - loki
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  grafana:
    image: grafana/grafana:11.2.2
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - loki
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3030:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase
      MB_DB_PORT: 5438
      MB_DB_USER: metabase
      MB_DB_PASS: metabase123
      MB_DB_HOST: metabase-db
      MB_METRICS_ENABLED: true
    depends_on:
      - metabase-db
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  otel-collector:
    image: otel/opentelemetry-collector:latest
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889:8889"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - risp
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - risp
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:1.56
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - risp
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped

  subscription_setup_auth:
    image: postgres:17
    depends_on:
      - auth_db_replica
    volumes:
      - ./migrations/auth/pg/setup_subscription.sh:/setup_subscription.sh:ro
    entrypoint: ["bash", "/setup_subscription.sh"]
    environment:
      - PGPASSWORD=replicator_password

  subscription_setup_menu:
    image: postgres:17
    depends_on:
      - menu_db_replica
    volumes:
      - ./migrations/menu/pg/setup_subscription.sh:/setup_subscription.sh:ro
    entrypoint: ["bash", "/setup_subscription.sh"]
    environment:
      - PGPASSWORD=replicator_password

  subscription_setup_order:
    image: postgres:17
    depends_on:
      - order_db_replica
    volumes:
      - ./migrations/order/pg/setup_subscription.sh:/setup_subscription.sh:ro
    entrypoint: ["bash", "/setup_subscription.sh"]
    environment:
      - PGPASSWORD=replicator_password

  subscription_setup_user:
    image: postgres:17
    depends_on:
      - user_db_replica
    volumes:
      - ./migrations/user/pg/setup_subscription.sh:/setup_subscription.sh:ro
    entrypoint: ["bash", "/setup_subscription.sh"]
    environment:
      - PGPASSWORD=replicator_password

volumes:
  prometheus_data:
  auth-postgres-data:
  auth-postgres-data-replica:
  menu-postgres-data:
  menu-postgres-data-replica:
  order-postgres-data:
  order-postgres-data-replica:
  user-postgres-data:
  user-postgres-data-replica:
  minio-data:
  zookeeper-data:
  loki-data:
  pgdata:

networks:
  risp:
    name: risp
